//
// Created by teapot on 28/11/23.
//

#ifndef MINDUSTRY_SRC_ARC_GRAPHICS_GL20_H
#define MINDUSTRY_SRC_ARC_GRAPHICS_GL20_H

#include <vector>
#include <string>
#include <cstdint>

struct GL20 {
    using ntemplate = std::uint8_t;
    using Buf = std::vector<ntemplate>;

    virtual ~GL20() = default;

    constexpr static const int GL_ES_VERSION_2_0 = 1;
    constexpr static const int GL_DEPTH_BUFFER_BIT = 0x00000100;
    constexpr static const int GL_STENCIL_BUFFER_BIT = 0x00000400;
    constexpr static const int GL_COLOR_BUFFER_BIT = 0x00004000;
    constexpr static const int GL_FALSE = 0;
    constexpr static const int GL_TRUE = 1;
    constexpr static const int GL_POINTS = 0x0000;
    constexpr static const int GL_LINES = 0x0001;
    constexpr static const int GL_LINE_LOOP = 0x0002;
    constexpr static const int GL_LINE_STRIP = 0x0003;
    constexpr static const int GL_TRIANGLES = 0x0004;
    constexpr static const int GL_TRIANGLE_STRIP = 0x0005;
    constexpr static const int GL_TRIANGLE_FAN = 0x0006;
    constexpr static const int GL_ZERO = 0;
    constexpr static const int GL_ONE = 1;
    constexpr static const int GL_SRC_COLOR = 0x0300;
    constexpr static const int GL_ONE_MINUS_SRC_COLOR = 0x0301;
    constexpr static const int GL_SRC_ALPHA = 0x0302;
    constexpr static const int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
    constexpr static const int GL_DST_ALPHA = 0x0304;
    constexpr static const int GL_ONE_MINUS_DST_ALPHA = 0x0305;
    constexpr static const int GL_DST_COLOR = 0x0306;
    constexpr static const int GL_ONE_MINUS_DST_COLOR = 0x0307;
    constexpr static const int GL_SRC_ALPHA_SATURATE = 0x0308;
    constexpr static const int GL_FUNC_ADD = 0x8006;
    constexpr static const int GL_BLEND_EQUATION = 0x8009;
    constexpr static const int GL_BLEND_EQUATION_RGB = 0x8009;
    constexpr static const int GL_BLEND_EQUATION_ALPHA = 0x883D;
    constexpr static const int GL_FUNC_SUBTRACT = 0x800A;
    constexpr static const int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
    constexpr static const int GL_BLEND_DST_RGB = 0x80C8;
    constexpr static const int GL_BLEND_SRC_RGB = 0x80C9;
    constexpr static const int GL_BLEND_DST_ALPHA = 0x80CA;
    constexpr static const int GL_BLEND_SRC_ALPHA = 0x80CB;
    constexpr static const int GL_CONSTANT_COLOR = 0x8001;
    constexpr static const int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
    constexpr static const int GL_CONSTANT_ALPHA = 0x8003;
    constexpr static const int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
    constexpr static const int GL_BLEND_COLOR = 0x8005;
    constexpr static const int GL_ARRAY_BUFFER = 0x8892;
    constexpr static const int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
    constexpr static const int GL_ARRAY_BUFFER_BINDING = 0x8894;
    constexpr static const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    constexpr static const int GL_STREAM_DRAW = 0x88E0;
    constexpr static const int GL_STATIC_DRAW = 0x88E4;
    constexpr static const int GL_DYNAMIC_DRAW = 0x88E8;
    constexpr static const int GL_BUFFER_SIZE = 0x8764;
    constexpr static const int GL_BUFFER_USAGE = 0x8765;
    constexpr static const int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
    constexpr static const int GL_FRONT = 0x0404;
    constexpr static const int GL_BACK = 0x0405;
    constexpr static const int GL_FRONT_AND_BACK = 0x0408;
    constexpr static const int GL_TEXTURE_2D = 0x0DE1;
    constexpr static const int GL_CULL_FACE = 0x0B44;
    constexpr static const int GL_BLEND = 0x0BE2;
    constexpr static const int GL_DITHER = 0x0BD0;
    constexpr static const int GL_STENCIL_TEST = 0x0B90;
    constexpr static const int GL_DEPTH_TEST = 0x0B71;
    constexpr static const int GL_SCISSOR_TEST = 0x0C11;
    constexpr static const int GL_POLYGON_OFFSET_FILL = 0x8037;
    constexpr static const int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
    constexpr static const int GL_SAMPLE_COVERAGE = 0x80A0;
    constexpr static const int GL_NO_ERROR = 0;
    constexpr static const int GL_INVALID_ENUM = 0x0500;
    constexpr static const int GL_INVALID_VALUE = 0x0501;
    constexpr static const int GL_INVALID_OPERATION = 0x0502;
    constexpr static const int GL_OUT_OF_MEMORY = 0x0505;
    constexpr static const int GL_CW = 0x0900;
    constexpr static const int GL_CCW = 0x0901;
    constexpr static const int GL_LINE_WIDTH = 0x0B21;
    constexpr static const int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
    constexpr static const int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
    constexpr static const int GL_CULL_FACE_MODE = 0x0B45;
    constexpr static const int GL_FRONT_FACE = 0x0B46;
    constexpr static const int GL_DEPTH_RANGE = 0x0B70;
    constexpr static const int GL_DEPTH_WRITEMASK = 0x0B72;
    constexpr static const int GL_DEPTH_CLEAR_VALUE = 0x0B73;
    constexpr static const int GL_DEPTH_FUNC = 0x0B74;
    constexpr static const int GL_STENCIL_CLEAR_VALUE = 0x0B91;
    constexpr static const int GL_STENCIL_FUNC = 0x0B92;
    constexpr static const int GL_STENCIL_FAIL = 0x0B94;
    constexpr static const int GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
    constexpr static const int GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
    constexpr static const int GL_STENCIL_REF = 0x0B97;
    constexpr static const int GL_STENCIL_VALUE_MASK = 0x0B93;
    constexpr static const int GL_STENCIL_WRITEMASK = 0x0B98;
    constexpr static const int GL_STENCIL_BACK_FUNC = 0x8800;
    constexpr static const int GL_STENCIL_BACK_FAIL = 0x8801;
    constexpr static const int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
    constexpr static const int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
    constexpr static const int GL_STENCIL_BACK_REF = 0x8CA3;
    constexpr static const int GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
    constexpr static const int GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
    constexpr static const int GL_VIEWPORT = 0x0BA2;
    constexpr static const int GL_SCISSOR_BOX = 0x0C10;
    constexpr static const int GL_COLOR_CLEAR_VALUE = 0x0C22;
    constexpr static const int GL_COLOR_WRITEMASK = 0x0C23;
    constexpr static const int GL_UNPACK_ALIGNMENT = 0x0CF5;
    constexpr static const int GL_PACK_ALIGNMENT = 0x0D05;
    constexpr static const int GL_MAX_TEXTURE_SIZE = 0x0D33;
    constexpr static const int GL_MAX_TEXTURE_UNITS = 0x84E2;
    constexpr static const int GL_MAX_VIEWPORT_DIMS = 0x0D3A;
    constexpr static const int GL_SUBPIXEL_BITS = 0x0D50;
    constexpr static const int GL_RED_BITS = 0x0D52;
    constexpr static const int GL_GREEN_BITS = 0x0D53;
    constexpr static const int GL_BLUE_BITS = 0x0D54;
    constexpr static const int GL_ALPHA_BITS = 0x0D55;
    constexpr static const int GL_DEPTH_BITS = 0x0D56;
    constexpr static const int GL_STENCIL_BITS = 0x0D57;
    constexpr static const int GL_POLYGON_OFFSET_UNITS = 0x2A00;
    constexpr static const int GL_POLYGON_OFFSET_FACTOR = 0x8038;
    constexpr static const int GL_TEXTURE_BINDING_2D = 0x8069;
    constexpr static const int GL_SAMPLE_BUFFERS = 0x80A8;
    constexpr static const int GL_SAMPLES = 0x80A9;
    constexpr static const int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
    constexpr static const int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
    constexpr static const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
    constexpr static const int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
    constexpr static const int GL_DONT_CARE = 0x1100;
    constexpr static const int GL_FASTEST = 0x1101;
    constexpr static const int GL_NICEST = 0x1102;
    constexpr static const int GL_GENERATE_MIPMAP = 0x8191;
    constexpr static const int GL_GENERATE_MIPMAP_HINT = 0x8192;
    constexpr static const int GL_BYTE = 0x1400;
    constexpr static const int GL_UNSIGNED_BYTE = 0x1401;
    constexpr static const int GL_SHORT = 0x1402;
    constexpr static const int GL_UNSIGNED_SHORT = 0x1403;
    constexpr static const int GL_INT = 0x1404;
    constexpr static const int GL_UNSIGNED_INT = 0x1405;
    constexpr static const int GL_FLOAT = 0x1406;
    constexpr static const int GL_FIXED = 0x140C;
    constexpr static const int GL_DEPTH_COMPONENT = 0x1902;
    constexpr static const int GL_ALPHA = 0x1906;
    constexpr static const int GL_RGB = 0x1907;
    constexpr static const int GL_RGBA = 0x1908;
    constexpr static const int GL_LUMINANCE = 0x1909;
    constexpr static const int GL_LUMINANCE_ALPHA = 0x190A;
    constexpr static const int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
    constexpr static const int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
    constexpr static const int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
    constexpr static const int GL_FRAGMENT_SHADER = 0x8B30;
    constexpr static const int GL_VERTEX_SHADER = 0x8B31;
    constexpr static const int GL_MAX_VERTEX_ATTRIBS = 0x8869;
    constexpr static const int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
    constexpr static const int GL_MAX_VARYING_VECTORS = 0x8DFC;
    constexpr static const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
    constexpr static const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
    constexpr static const int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
    constexpr static const int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
    constexpr static const int GL_SHADER_TYPE = 0x8B4F;
    constexpr static const int GL_DELETE_STATUS = 0x8B80;
    constexpr static const int GL_LINK_STATUS = 0x8B82;
    constexpr static const int GL_VALIDATE_STATUS = 0x8B83;
    constexpr static const int GL_ATTACHED_SHADERS = 0x8B85;
    constexpr static const int GL_ACTIVE_UNIFORMS = 0x8B86;
    constexpr static const int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
    constexpr static const int GL_ACTIVE_ATTRIBUTES = 0x8B89;
    constexpr static const int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
    constexpr static const int GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
    constexpr static const int GL_CURRENT_PROGRAM = 0x8B8D;
    constexpr static const int GL_NEVER = 0x0200;
    constexpr static const int GL_LESS = 0x0201;
    constexpr static const int GL_EQUAL = 0x0202;
    constexpr static const int GL_LEQUAL = 0x0203;
    constexpr static const int GL_GREATER = 0x0204;
    constexpr static const int GL_NOTEQUAL = 0x0205;
    constexpr static const int GL_GEQUAL = 0x0206;
    constexpr static const int GL_ALWAYS = 0x0207;
    constexpr static const int GL_KEEP = 0x1E00;
    constexpr static const int GL_REPLACE = 0x1E01;
    constexpr static const int GL_INCR = 0x1E02;
    constexpr static const int GL_DECR = 0x1E03;
    constexpr static const int GL_INVERT = 0x150A;
    constexpr static const int GL_INCR_WRAP = 0x8507;
    constexpr static const int GL_DECR_WRAP = 0x8508;
    constexpr static const int GL_VENDOR = 0x1F00;
    constexpr static const int GL_RENDERER = 0x1F01;
    constexpr static const int GL_VERSION = 0x1F02;
    constexpr static const int GL_EXTENSIONS = 0x1F03;
    constexpr static const int GL_NEAREST = 0x2600;
    constexpr static const int GL_LINEAR = 0x2601;
    constexpr static const int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
    constexpr static const int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
    constexpr static const int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
    constexpr static const int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
    constexpr static const int GL_TEXTURE_MAG_FILTER = 0x2800;
    constexpr static const int GL_TEXTURE_MIN_FILTER = 0x2801;
    constexpr static const int GL_TEXTURE_WRAP_S = 0x2802;
    constexpr static const int GL_TEXTURE_WRAP_T = 0x2803;
    constexpr static const int GL_TEXTURE = 0x1702;
    constexpr static const int GL_TEXTURE_CUBE_MAP = 0x8513;
    constexpr static const int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
    constexpr static const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
    constexpr static const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
    constexpr static const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
    constexpr static const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
    constexpr static const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
    constexpr static const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
    constexpr static const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
    constexpr static const int GL_TEXTURE0 = 0x84C0;
    constexpr static const int GL_TEXTURE1 = 0x84C1;
    constexpr static const int GL_TEXTURE2 = 0x84C2;
    constexpr static const int GL_TEXTURE3 = 0x84C3;
    constexpr static const int GL_TEXTURE4 = 0x84C4;
    constexpr static const int GL_TEXTURE5 = 0x84C5;
    constexpr static const int GL_TEXTURE6 = 0x84C6;
    constexpr static const int GL_TEXTURE7 = 0x84C7;
    constexpr static const int GL_TEXTURE8 = 0x84C8;
    constexpr static const int GL_TEXTURE9 = 0x84C9;
    constexpr static const int GL_TEXTURE10 = 0x84CA;
    constexpr static const int GL_TEXTURE11 = 0x84CB;
    constexpr static const int GL_TEXTURE12 = 0x84CC;
    constexpr static const int GL_TEXTURE13 = 0x84CD;
    constexpr static const int GL_TEXTURE14 = 0x84CE;
    constexpr static const int GL_TEXTURE15 = 0x84CF;
    constexpr static const int GL_TEXTURE16 = 0x84D0;
    constexpr static const int GL_TEXTURE17 = 0x84D1;
    constexpr static const int GL_TEXTURE18 = 0x84D2;
    constexpr static const int GL_TEXTURE19 = 0x84D3;
    constexpr static const int GL_TEXTURE20 = 0x84D4;
    constexpr static const int GL_TEXTURE21 = 0x84D5;
    constexpr static const int GL_TEXTURE22 = 0x84D6;
    constexpr static const int GL_TEXTURE23 = 0x84D7;
    constexpr static const int GL_TEXTURE24 = 0x84D8;
    constexpr static const int GL_TEXTURE25 = 0x84D9;
    constexpr static const int GL_TEXTURE26 = 0x84DA;
    constexpr static const int GL_TEXTURE27 = 0x84DB;
    constexpr static const int GL_TEXTURE28 = 0x84DC;
    constexpr static const int GL_TEXTURE29 = 0x84DD;
    constexpr static const int GL_TEXTURE30 = 0x84DE;
    constexpr static const int GL_TEXTURE31 = 0x84DF;
    constexpr static const int GL_ACTIVE_TEXTURE = 0x84E0;
    constexpr static const int GL_REPEAT = 0x2901;
    constexpr static const int GL_CLAMP_TO_EDGE = 0x812F;
    constexpr static const int GL_MIRRORED_REPEAT = 0x8370;
    constexpr static const int GL_FLOAT_VEC2 = 0x8B50;
    constexpr static const int GL_FLOAT_VEC3 = 0x8B51;
    constexpr static const int GL_FLOAT_VEC4 = 0x8B52;
    constexpr static const int GL_INT_VEC2 = 0x8B53;
    constexpr static const int GL_INT_VEC3 = 0x8B54;
    constexpr static const int GL_INT_VEC4 = 0x8B55;
    constexpr static const int GL_BOOL = 0x8B56;
    constexpr static const int GL_BOOL_VEC2 = 0x8B57;
    constexpr static const int GL_BOOL_VEC3 = 0x8B58;
    constexpr static const int GL_BOOL_VEC4 = 0x8B59;
    constexpr static const int GL_FLOAT_MAT2 = 0x8B5A;
    constexpr static const int GL_FLOAT_MAT3 = 0x8B5B;
    constexpr static const int GL_FLOAT_MAT4 = 0x8B5C;
    constexpr static const int GL_SAMPLER_2D = 0x8B5E;
    constexpr static const int GL_SAMPLER_CUBE = 0x8B60;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
    constexpr static const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
    constexpr static const int GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
    constexpr static const int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
    constexpr static const int GL_COMPILE_STATUS = 0x8B81;
    constexpr static const int GL_INFO_LOG_LENGTH = 0x8B84;
    constexpr static const int GL_SHADER_SOURCE_LENGTH = 0x8B88;
    constexpr static const int GL_SHADER_COMPILER = 0x8DFA;
    constexpr static const int GL_SHADER_BINARY_FORMATS = 0x8DF8;
    constexpr static const int GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
    constexpr static const int GL_LOW_FLOAT = 0x8DF0;
    constexpr static const int GL_MEDIUM_FLOAT = 0x8DF1;
    constexpr static const int GL_HIGH_FLOAT = 0x8DF2;
    constexpr static const int GL_LOW_INT = 0x8DF3;
    constexpr static const int GL_MEDIUM_INT = 0x8DF4;
    constexpr static const int GL_HIGH_INT = 0x8DF5;
    constexpr static const int GL_FRAMEBUFFER = 0x8D40;
    constexpr static const int GL_RENDERBUFFER = 0x8D41;
    constexpr static const int GL_RGBA4 = 0x8056;
    constexpr static const int GL_RGB5_A1 = 0x8057;
    constexpr static const int GL_RGB565 = 0x8D62;
    constexpr static const int GL_DEPTH_COMPONENT16 = 0x81A5;
    constexpr static const int GL_STENCIL_INDEX = 0x1901;
    constexpr static const int GL_STENCIL_INDEX8 = 0x8D48;
    constexpr static const int GL_RENDERBUFFER_WIDTH = 0x8D42;
    constexpr static const int GL_RENDERBUFFER_HEIGHT = 0x8D43;
    constexpr static const int GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
    constexpr static const int GL_RENDERBUFFER_RED_SIZE = 0x8D50;
    constexpr static const int GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
    constexpr static const int GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
    constexpr static const int GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
    constexpr static const int GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
    constexpr static const int GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
    constexpr static const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
    constexpr static const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
    constexpr static const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
    constexpr static const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
    constexpr static const int GL_COLOR_ATTACHMENT0 = 0x8CE0;
    constexpr static const int GL_DEPTH_ATTACHMENT = 0x8D00;
    constexpr static const int GL_STENCIL_ATTACHMENT = 0x8D20;
    constexpr static const int GL_NONE = 0;
    constexpr static const int GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
    constexpr static const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
    constexpr static const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    constexpr static const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
    constexpr static const int GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
    constexpr static const int GL_FRAMEBUFFER_BINDING = 0x8CA6;
    constexpr static const int GL_RENDERBUFFER_BINDING = 0x8CA7;
    constexpr static const int GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
    constexpr static const int GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
    constexpr static const int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
    // Extensions
    constexpr static const int GL_COVERAGE_BUFFER_BIT_NV = 0x8000;
    constexpr static const int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
    constexpr static const int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

    virtual void glActiveTexture(int &texture) = 0;
    virtual void glBindTexture(int &target, int &texture) = 0;
    virtual void glBlendFunc(int &sfactor, int &dfactor) = 0;
    virtual void glClear(int &mask) = 0;
    virtual void glClearColor(float &red, float &green, float &blue, float &alpha) = 0;
    virtual void glClearDepthf(float &depth) = 0;
    virtual void glClearStencil(int &s) = 0;
    virtual void glColorMask(bool &red, bool &green, bool &blue, bool &alpha) = 0;
    virtual void glCompressedTexImage2D(int &target, int &level, int &internalformat, int &width, int &height,
                                        int &border, int &imageSize, Buf &data) = 0;
    virtual void glCompressedTexSubImage2D(int &target, int &level, int &xoffset, int &yoffset,
                                           int &width, int &height, int &format, int &imageSize,
                                           Buf &data) = 0;
    virtual void glCopyTexImage2D(int &target, int &level, int &internalformat, int &x, int &y,
                                  int &width, int &height, int &border) = 0;
    virtual void glCopyTexSubImage2D(int &target, int &level, int &xoffset, int &yoffset, int &x,
                                     int &y, int &width, int &height) = 0;
    virtual void glCullFace(int &mode) = 0;
    virtual void glDeleteTexture(int &texture) = 0;
    virtual void glDepthFunc(int &func) = 0;
    virtual void glDepthMask(bool &flag) = 0;
    virtual void glDepthRangef(float &zNear, float &zFar) = 0;
    virtual void glDisable(int &cap) = 0;
    virtual void glDrawArrays(int &mode, int &first, int &count) = 0;
    virtual void glDrawElements(int &mode, int &count, int &type, Buf &indices) = 0;
    virtual void glEnable(int &cap) = 0;
    virtual void glFinish() = 0;
    virtual void glFlush() = 0;
    virtual void glFrontFace(int &mode) = 0;
    virtual int glGenTexture() = 0;
    virtual int glGetError() = 0;
    virtual void glGetInterv(int &pname, std::vector<int> &params) = 0;
    virtual std::string glGetString(int &name) = 0;
    virtual void glHint(int &target, int &mode) = 0;
    virtual void glLineWidth(float &width) = 0;
    virtual void glPixelStorei(int &pname, int &param) = 0;
    virtual void glPolygonOffset(float &factor, float &unit) = 0;
    virtual void glReadPixels(int &x, int &y, int &width, int &height, int &format,
                              int &type, Buf &pixels) = 0;
    virtual void glScissor(int &x, int &y, int &width, int &height) = 0;
    virtual void glStencilFunc(int &func, int &ref, int &mask) = 0;
    virtual void glStencilMask(int &mask) = 0;
    virtual void glStencilOp(int &fail, int &zfail, int &zpass) = 0;
    virtual void glTexImage2D(int &target, int &level, int &internalformat, int &width,
                              int &height, int &border, int &format, int &type, Buf &pixels) = 0;
    virtual void glTexParameterf(int &target, int &pname, float &param) = 0;
    virtual void glTexSubImage2D(int &target, int &level ,int &xoffset, int &yoffset,
                                 int &width, int &height, int &format, int &type, Buf& pixels) = 0;
    virtual void glViewport(int &x, int &y, int &width, int &height) = 0;
    virtual void glAttachShader(int &program, int &shader) = 0;
    virtual void glBindAttribLocation(int& program, int &index, std::string &name) = 0;
    virtual void glBindBuffer(int &target, int &buffer) = 0;
    virtual void glBindFramebuffer(int &target, int &framebuffer) = 0;
    virtual void glBindRenderbuffer(int &target, int &renderbuffer) = 0;
    virtual void glBlendColor(float &red, float &green, float &blue, float &alpha) = 0;
    virtual void glBlendEquation(int &mode) = 0;
    virtual void glBlendEquationSeparate(int &modeRGB, int &modeAlpha) = 0;
    virtual void glBlendFuncSeparate(int &srcRGB, int &dstRB, int &srcAlpha, int &dstAlpha) = 0;
    virtual void glBufferData(int &target, int &size, Buf &data, int &usage) = 0;
    virtual void glBufferSubData(int &target, int &offset, int &size, Buf& dat) = 0;
    virtual int glCheckFramebufferStatus(int &target) = 0;
    virtual void glCompileShader(int &shader) = 0;
    virtual int glCreateProgram() = 0;
    virtual int glCreateShader(int &type) = 0;
    virtual void glDeleteBuffer(int &buffer) = 0;
    virtual void glDeleteFramebuffer(int &framebuffer) = 0;
    virtual void glDeleteProgram(int &program) = 0;
    virtual void glDeleteRenderbuffer(int &renderbuffer) = 0;
    virtual void glDeleteShader(int &shader) = 0;
    virtual void glDetachShader(int &program, int &shader) = 0;
    virtual void glDisableVertexAttribArray(int &index) = 0;
    virtual void glDrawElements(int& mode, int &count, int &type, int &indices) = 0;
    virtual void glEnableVertexAttribArray(int &index) = 0;
    virtual void glFramebufferRenderbuffer(int &target, int &attachment, int &renderbuffertarget,
                                           int &renderbuffer) = 0;
    virtual void glFramebufferTexture2D(int &target, int &attachment, int &textarget, int &texture,
                                        int &level) = 0;
    virtual int glGenBuffer() = 0;
    virtual void glGenerateMipmap(int &target) = 0;
    virtual int glGenFramebuffer() = 0;
    virtual int glGenRenderbuffer() = 0;
    virtual std::string glGetActiveAttrib(int &program, int &index, std::vector<int> &size, std::vector<int> &type) = 0;
    virtual std::string glGetActiveUniform(int &program, int &index, std::vector<int> &size, std::vector<int> &type) = 0;
    virtual int glGetAttribLocation(int &program, std::string &name) = 0;
    virtual void glGetBooleanv(int &pname, Buf& params) = 0;
    virtual void glGetBufferParameteriv(int &target, int &pname, std::vector<int> &params) = 0;
    virtual void glGetFloatv(int &pname, std::vector<float> &params) = 0;
    virtual void glGetFramebufferAttachmentparameteriv(int &target, int &attachment, int &pname, std::vector<int> &params) = 0;
    virtual void glGetProgramiv(int &program, int &pname, std::vector<int> &params) = 0;
    virtual std::string glGetProgramInfoLog(int &program) = 0;
    virtual void glGetRenderbufferParameteriv(int &target, int &pname, std::vector<int> &params) = 0;
    virtual void glGetShaderiv(int &shader, int &pname, std::vector<int> &params) = 0;
    virtual std::string glGetShaderInfoLog(int &shader) = 0;
    virtual void glGetShaderPrecisionFormat(int &shadertype, int &precisiontype, std::vector<int> &range, std::vector<int> &precision) = 0;
    virtual void glGetTexParameterfv(int &target, int &pname, std::vector<float> &params) = 0;
    virtual void glGetTexParameteriv(int &target, int &pname, std::vector<int> &params) = 0;
    virtual void glGetUniformfv(int &program, int &location, std::vector<float> &params) = 0;
    virtual void glGetUniformiv(int &program, int &location, std::vector<int> &params) = 0;
    virtual int glGetUniformLocation(int &program, std::string &name) = 0;
    virtual void glGetVertexAttribfv(int &index, int &pname, std::vector<float> &params) = 0;
    virtual void glGetVertexAttribiv(int &index, int &pname, std::vector<int> &params) = 0;
    virtual bool glIsBuffer(int &buffer) = 0;
    virtual bool glIsEnabled(int &cap) = 0;
    virtual bool glIsFramebuffer(int &framebuffer) = 0;
    virtual bool glIsProgram(int &program) = 0;
    virtual bool glIsRenderbuffer(int &renderbuffer) = 0;
    virtual bool glIsShader(int &shader) = 0;
    virtual bool glIsTexture(int &texture) = 0;
    virtual void glLinkProgram(int &program) = 0;
    virtual void glReleaseShaderCompiler() = 0;
    virtual void glRenderbufferStorage(int &target, int &internalformat, int &width, int &height) = 0;
    virtual void glSampleCoverage(float &value, bool &invert) = 0;
    virtual void glShaderSource(int &shader, std::string &string) = 0;
    virtual void glStencilFuncSeparate(int &face, int &func, int &ref, int &mask) = 0;
    virtual void glStencilMaskSeparate(int &face, int &mask) = 0;
    virtual void glStencilOpSeparate(int &face, int &fail, int &zfail, int &zpass) = 0;
    virtual void glTexParameterfv(int &target, int &pname, std::vector<float> &params) = 0;
    virtual void glTexParameteri(int &target, int &pname, int &param) = 0;
    virtual void glTexParameteriv(int &target, int &pname, std::vector<int> &params) = 0;
    virtual void glUniform1f(int &location, float &x) = 0;
    virtual void glUniform1fv(int &location, int &count, std::vector<float> &v) = 0;
    virtual void glUniform1fv(int &location, int &count, std::vector<float> &v, int &offset) = 0;
    virtual void glUniform1i(int &location, int &x) = 0;
    virtual void glUniform1iv(int & location, int &count, std::vector<int> &v) = 0;
    virtual void glUniform1iv(int & location, int &count, std::vector<int> &v, int &offset) = 0;
    virtual void glUniform2f(int &location, float &x, float &y) = 0;
    virtual void glUniform2fv(int &location, int &count, std::vector<float> &v) = 0;
    virtual void glUniform2fv(int &location, int &count, std::vector<float> &v, int &offset) = 0;
    virtual void glUniform2i(int &location, int &x, int &y) = 0;
    virtual void glUniform2iv(int & location, int &count, std::vector<int> &v) = 0;
    virtual void glUniform2iv(int & location, int &count, std::vector<int> &v, int &offset) = 0;
    virtual void glUniform3f(int &location, float &x, float &y, float &z) = 0;
    virtual void glUniform3fv(int &location, int &count, std::vector<float> &v) = 0;
    virtual void glUniform3fv(int &location, int &count, std::vector<float> &v, int &offset) = 0;
    virtual void glUniform3i(int &location, int &x, int &y, int &z) = 0;
    virtual void glUniform3iv(int & location, int &count, std::vector<int> &v) = 0;
    virtual void glUniform3iv(int & location, int &count, std::vector<int> &v, int &offset) = 0;
    virtual void glUniform4f(int &location, float &x, float &y, float &z, float &w) = 0;
    virtual void glUniform4fv(int &location, int &count, std::vector<float> &v) = 0;
    virtual void glUniform4fv(int &location, int &count, std::vector<float> &v, int &offset) = 0;
    virtual void glUniform4i(int &location, int &x, int &y, int &z, int &w) = 0;
    virtual void glUniform4iv(int & location, int &count, std::vector<int> &v) = 0;
    virtual void glUniform4iv(int & location, int &count, std::vector<int> &v, int &offset) = 0;
    virtual void glUniformMatrix2fv(int &location, int &count, bool& transpose, std::vector<float> &value) = 0;
    virtual void glUniformMatrix2fv(int &location, int &count, bool& transpose, std::vector<float> &value, int &offset) = 0;
    virtual void glUniformMatrix3fv(int &location, int &count, bool& transpose, std::vector<float> &value) = 0;
    virtual void glUniformMatrix3fv(int &location, int &count, bool& transpose, std::vector<float> &value, int &offset) = 0;
    virtual void glUniformMatrix4fv(int &location, int &count, bool& transpose, std::vector<float> &value) = 0;
    virtual void glUniformMatrix4fv(int &location, int &count, bool& transpose, std::vector<float> &value, int &offset) = 0;
    virtual void glUseProgram(int &program) = 0;
    virtual void glValidateProgram(int &program) = 0;
    virtual void glVertexAttrib1f(int &indx, float &x) = 0;
    virtual void glVertexAttrib1fv(int &indx, std::vector<float> &values) = 0;
    virtual void glVertexAttrib2f(int &indx, float &x, float &y) = 0;
    virtual void glVertexAttrib2fv(int &indx, std::vector<float> &values) = 0;
    virtual void glVertexAttrib3f(int &indx, float &x, float &y, float &z) = 0;
    virtual void glVertexAttrib3fv(int &indx, std::vector<float> &values) = 0;
    virtual void glVertexAttrib4f(int &indx, float &x, float &y, float &z, float &w) = 0;
    virtual void glVertexAttrib4fv(int &indx, std::vector<float> &values) = 0;

    virtual void glVertexAttribPointer(int &indx, int &size, int &type, bool &normalized, int &stride, Buf& ptr) = 0;
    virtual void glVertexAttribPointer(int &indx, int &size, int &type, bool &normalized, int &stride, int &ptr) = 0;
};


#endif //MINDUSTRY_SRC_ARC_GRAPHICS_GL20_H
